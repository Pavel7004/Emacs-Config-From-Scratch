#+STARTUP: overview

* Secure code editor
reference: https://gitlab.com/buildfunthings/emacs-config
#+BEGIN_SRC emacs-lisp
    (require 'cl)
    (setq tls-checktrust t)

    (setq python (or (executable-find "py.exe")
                     (executable-find "python")
                     ))

    (let ((trustfile
           (replace-regexp-in-string
            "\\\\" "/"
            (replace-regexp-in-string
             "\n" ""
             (shell-command-to-string (concat python " -m certifi"))))))
      (setq tls-program
            (list
             (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                     (if (eq window-system 'w32) ".exe" "") trustfile)))
      (setq gnutls-verify-error t)
      (setq gnutls-trustfiles (list trustfile)))

  ;   Test the settings by using the following code snippet:
  ;    (let ((bad-hosts
  ;          (loop for bad
  ;                 in `("https://wrong.host.badssl.com/"
  ;                      "https://self-signed.badssl.com/")
  ;                if (condition-case e
  ;                       (url-retrieve
  ;                        bad (lambda (retrieved) t))
  ;                     (error nil))
  ;                collect bad)))
  ;     (if bad-hosts
  ;         (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
  ;       (url-retrieve "https://badssl.com"
  ;                     (lambda (retrieved) t))))
#+END_SRC


* apperiance settings
** set mode line
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :demand
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-height 28)
    (setq doom-modeline-minor-modes (featurep 'minions)))

  (use-package minions
    :ensure t
    :config (minions-mode 1))
#+END_SRC
** colorscheme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :demand
    :ensure t
    :init
    (load-theme 'doom-nord t)
    (doom-themes-visual-bell-config)
    (setq doom-themes-treemacs-theme "doom-colors")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+END_SRC
** solaire mode
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :ensure t
    :hook (((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
           (minibuffer-setup . solaire-mode-in-minibuffer))
    :config
    (solaire-global-mode)
    (solaire-mode-swap-bg))
#+END_SRC
** set font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "Mononoki 12" nil t)
#+END_SRC

* Basic settings
** utf-8 coding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
** reload config
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "reloads ~/.emacs.d/myConfig.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/myConfig.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** disable GUI elements
*** get rid of startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
*** disable dialog box
#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil)
#+END_SRC
*** disable bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
*** disable hello file function
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-h h"))
#+END_SRC
** decrease scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-consevatively 100)
#+END_SRC
** replace yes-no for y-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  (setq version-control t)
  (setq delete-old-versions t)
#+END_SRC
** display time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
** Terminal
*** set default shell to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/usr/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** real names in symbolic links
#+BEGIN_SRC emacs-lisp
  (setq find-file-visit-truename t)
#+END_SRC
** stretch cursor
#+BEGIN_SRC emacs-lisp
  (setq x-stretch-cursor t)
#+END_SRC
** remove whitespace before save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC
* Basic packages
** all the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :defer 3
    :ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :defer 3
    :ensure t
    :diminish which-key-mode
    :init
    (which-key-mode))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
** hide mode line
#+BEGIN_SRC emacs-lisp
  (use-package hide-mode-line
    :defer t
    :ensure t
    :hook (completion-list-mode . hide-mode-line-mode))
#+END_SRC
** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)

  (use-package use-package-hydra
    :after hydra
    :ensure t)
#+END_SRC
** Async processes wherever possible
#+BEGIN_SRC emacs-lisp
  (use-package async
    :demand
    :ensure t
    :init
    (setq async-bytecomp-package-mode t))
#+END_SRC



* ido and ibuffer
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (ido-mode)
    (ido-everywhere)
    :config
    (setq ido-enable-flex-matching nil)
    (setq ido-create-new-buffer 'always)
    (setq ido-confirm-unique-completion nil)
    (setq ido-all-frames nil))
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :after ido
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :config
    (setq ibuffer-display-summary nil)
    (setq ibuffer-use-other-window nil)
    :bind ("C-x C-b" . ibuffer))

  (use-package ibuffer-projectile
    :ensure t
    :after (ibuffer projectile)
    :hook
    (ibuffer . (lambda ()
                 (ibuffer-projectile-set-filter-groups)
                 (unless (eq ibuffer-sorting-mode 'recency)
                   (ibuffer-do-sort-by-recency)))))
#+END_SRC
** smex(Ido like M-x menu)
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :after ido
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC
* dired
source: https://gitlab.com/protesilaos/dotemacs/blob/master/emacs-init.org
** base settings
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq dired-isearch-filenames 'dwim)
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches "-AFlv --group-directories-first")
    (setq dired-dwim-target t)
    ;;:hook (dired-mode . dired-hide-details-mode)
    :bind (("C-c d" . dired)
           ("C-c D" . dired-other-window)))

  (use-package find-dired
    :after dired
    :config
    (setq find-ls-option ;; applies to `find-name-dired'
          '("-ls" . "-AFlv --group-directories-first"))
    (setq find-name-arg "-iname"))

  (use-package dired-async
    :after dired
    :config
    (dired-async-mode 1))
#+END_SRC
** file previews
#+BEGIN_SRC emacs-lisp
  (use-package peep-dired
    :ensure t
    :after dired
    :bind (:map dired-mode-map
                ("P" . peep-dired))
    :config
    (setq peep-dired-cleanup-on-disable t)
    (setq peep-dired-ignored-extensions '("mkv" "webm" "mp4" "mp3" "ogg" "iso")))

  ;; ;; use this for peep always on
  ;; (setq peep-dired-enable-on-directories t)
#+END_SRC
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :hook (after-init . dashboard-setup-startup-hook)
    :config
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content nil)
    (setq dashboard-items '((recents . 10)
                            (projects . 10)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t))
#+END_SRC
* recentf mode
source: https://gitlab.com/protesilaos/dotemacs/blob/master/emacs-init.org
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (recentf-mode 1)
    (setq recentf-save-file "~/.emacs.d/recentf")
    (setq recentf-max-menu-items 10)
    (setq recentf-max-saved-items 100)
    (setq recentf-show-file-shortcuts-flag nil)

    ;; Magic advice to rename entries in recentf when moving files in
    ;; dired.
    (defun rjs/recentf-rename-notify (oldname newname &rest args)
      (if (file-directory-p newname)
          (rjs/recentf-rename-directory oldname newname)
        (rjs/recentf-rename-file oldname newname)))

    (defun rjs/recentf-rename-file (oldname newname)
      (setq recentf-list
            (mapcar (lambda (name)
                      (if (string-equal name oldname)
                          newname
                        oldname))
                    recentf-list))
      recentf-cleanup)

    (defun rjs/recentf-rename-directory (oldname newname)
      ;; oldname, newname and all entries of recentf-list should already
      ;; be absolute and normalised so I think this can just test whether
      ;; oldname is a prefix of the element.
      (setq recentf-list
            (mapcar (lambda (name)
                      (if (string-prefix-p oldname name)
                          (concat newname (substring name (length oldname)))
                        name))
                    recentf-list))
      recentf-cleanup)

    (advice-add 'dired-rename-file :after #'rjs/recentf-rename-notify)

    (defun contrib/recentf-add-dired-directory ()
      "Include Dired buffers in the list.  Particularly useful when
  combined with Ido's ability to display virtual buffers."
      (when (and (stringp dired-directory)
                 (equal "" (file-name-nondirectory dired-directory)))
        (recentf-add-file dired-directory)))

    (defun contrib/ido-choose-from-recentf ()
      "Use ido to select a recently opened file from the
  `recentf-list'.  The full path to the user's home directory is
  truncated into a tilde."
      (interactive)
      (let ((home (expand-file-name (getenv "HOME"))))
        (find-file
         (ido-completing-read "Recentf open: "
                              (mapcar (lambda (path)
                                        (replace-regexp-in-string home "~" path))
                                      recentf-list)
                              nil t))))

    :bind ("C-x C-r" . contrib/ido-choose-from-recentf))
#+END_SRC
* save cursor position
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (save-place-mode 1)
    (setq save-place-file "~/.emacs.d/saveplace"))
#+END_SRC


* code style
** C/C++
#+BEGIN_SRC emacs-lisp
  (defun my-c-style ()
    (c-set-style "gnu")
    (turn-on-font-lock)
    (setq tab-width 2))

  (add-hook 'c-mode-hook 'my-c-style)
  (add-hook 'c++-mode-hook 'my-c-style)
#+END_SRC
** enable line highlight
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode t))
#+END_SRC
** electric(auto closing brackets)
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
** rainbow(colored hex colors)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :hook (org-mode . rainbow-mode))
#+END_SRC
** agressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :hook (prog-mode . linum-relative-mode)
    :config
    (setq linum-relative-current-symbol ""))
#+END_SRC
** highlight indents in elisp mode
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :hook (emacs-lisp-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-auto-odd-face-perc 20)
    (setq highlight-indent-guides-auto-even-face-perc 20)
    (setq highlight-indent-guides-auto-character-face-perc 50)
    (setq highlight-indent-guides-responsive 'top))
#+END_SRC
** rainbow delimeters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* org mode settings
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . org-indent-mode)
           (org-mode . (lambda ()
                         (setq left-margin-width 4)
                         (setq right-margin-width 4)
                         (setq-local global-hl-line-mode nil)
                         (set-window-buffer nil (current-buffer)))))
    :config
    (setq org-ellipsis "  " ;; folding symbol
          org-pretty-entities t
          org-hide-emphasis-markers t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t))

  (use-package org-bullets
    :after org
    :ensure t
    :hook
    (org-mode . org-bullets-mode))
#+END_SRC
* expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC
* auto completion
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :hook (prog-mode . company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2))

  (use-package company-quickhelp
    :after company
    :ensure t
    :hook (company-mode . company-quickhelp-local-mode)
    :init (setq company-quickhelp-delay 0.5))

  (use-package company-box
    :ensure t
    :after company
    :hook (company-mode . company-box-mode)
    :init (setq company-box-doc-delay 0.5))
#+END_SRC
** lsp mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (prog-mode . lsp)
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :after lsp
    :commands lsp-ui-mode)

  (use-package company-lsp
    :ensure t
    :after (lsp company)
    :commands company-lsp)

  (use-package lsp-treemacs
    :ensure t
    :after (lsp treemacs)
    :commands lsp-treemacs-errors-list)

  (use-package dap-mode
    :ensure t
    :after lsp)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets
    :after yasnippet
    :ensure t
    :config (yas-reload-all))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :hook (prog-mode . projectile-mode)
    :bind ("<f5>" . 'projectile-compile-project)
    :bind-keymap ("C-c p" . projectile-command-map)
    :config
    (setq projectile-completion-system 'ido)
    (setq projectile-enable-caching t))
#+END_SRC
* popup shell
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    :bind ("C-<f5>" . shell-pop)
    :hook (shell-pop-out . hide-mode-line-mode)
    :config
    (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*"
                                       (lambda nil (ansi-term shell-pop-term-shell)))))
    (setq shell-pop-term-shell "/bin/bash")
    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC
* magit (version control)
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c m" . magit-status)
    :config
    (setq magit-completing-read-function 'magit-ido-completing-read))

  (use-package magit-gitflow
    :after magit
    :ensure t
    :hook (magit-mode . turn-on-magit-gitflow))

  (use-package git-gutter
    :after hydra use-package-hydra
    :ensure t
    :bind (:map prog-mode-map
                ("<f9>" . hydra-git-gutter/body))
    :hydra (hydra-git-gutter (:pre (progn (linum-relative-mode -1)
                                          (git-gutter-mode 1))
                                   :hint nil)
                             "
    Git gutter:
      _n_ext hunk        _s_tage hunk     _ESC_: quit
      _p_revious hunk    _r_evert hunk
      ^ ^                _P_opup hunk
      _f_irst hunk
      _l_ast hunk        set start _R_evision
    "
                             ("n" git-gutter:next-hunk)
                             ("p" git-gutter:previous-hunk)
                             ("f" (progn (goto-char (point-min))
                                         (git-gutter:next-hunk 1)))
                             ("l" (progn (goto-char (point-min))
                                         (git-gutter:previous-hunk 1)))
                             ("s" git-gutter:stage-hunk)
                             ("r" git-gutter:revert-hunk)
                             ("P" git-gutter:popup-hunk)
                             ("R" git-gutter:set-start-revision)
                             ("ESC" (progn (git-gutter-mode -1)
                                           (linum-relative-mode 1)
                                           (sit-for 0.1)
                                           (git-gutter:clear))
                              :color blue)))
#+END_SRC
* treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-display-in-side-window        nil
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         t
            treemacs-width                         35)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC
* swiper(C-s search)
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer t
    :ensure t
    :init (global-flycheck-mode))

  (use-package flycheck-pos-tip
    :ensure t
    :after flycheck
    :hook (flycheck-mode . flycheck-pos-tip-mode))
#+END_SRC
* spell checking
#+BEGIN_SRC emacs-lisp
  ;; (use-package flyspell
  ;;   :init
  ;;   (setq ispell-program-name "hunspell")
  ;;   (setq ispell-local-dictionary "en_US")
  ;;   (setq flyspell-issue-message-flag nil)
  ;;   (setq flyspell-issue-welcome-flag nil)
  ;;   (setq ispell-local-dictionary-alist
  ;;         '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
  ;;           ))
  ;; :config
  ;; (define-key flyspell-mode-map (kbd "C-;") nil)
  ;; :hook
  ;; (text-mode . flyspell-mode)
  ;; (prog-mode . flyspell-prog-mode))
#+END_SRC
