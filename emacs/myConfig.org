* Terminal
** set default shell to bash
#+BEGIN_SRC emacs-lisp 
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 15))))
#+END_SRC
* Editor
** enable line highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** disable bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** decrease scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-consevatively 100)
#+END_SRC
** replace yes-no for y-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** no backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC
** display time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
** tab width
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 8)`
#+END_SRC
* Packages
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** rainbow(colored hex colors)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
** powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init
    (powerline-default-theme))
#+END_SRC
** powerline-evil
#+BEGIN_SRC emacs-lisp
  (use-package powerline-evil
    :ensure t
    :init
    (powerline-evil-vim-color-theme))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode))
#+END_SRC
* ido
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
* evil mode
** package
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (evil-mode 1))
#+END_SRC
* auto completion
** company package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  ;(with-eval-after-load 'company
  ;  (define-key company-active-map (kbd "<tab>") #'company-select-next)
  ;  (define-key company-active-map (kbd "<S-tab>") #'company-select-previous))
#+END_SRC
** company irony
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+END_SRC
