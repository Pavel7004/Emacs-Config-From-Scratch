
* Secure code editor
#+BEGIN_SRC emacs-lisp
    (require 'cl)
    (setq tls-checktrust t)

    (setq python (or (executable-find "py.exe")
		     (executable-find "python")
		     ))

    (let ((trustfile
	   (replace-regexp-in-string
	    "\\\\" "/"
	    (replace-regexp-in-string
	     "\n" ""
	     (shell-command-to-string (concat python " -m certifi"))))))
      (setq tls-program
	    (list
	     (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
		     (if (eq window-system 'w32) ".exe" "") trustfile)))
      (setq gnutls-verify-error t)
      (setq gnutls-trustfiles (list trustfile)))

  ;   Test the settings by using the following code snippet:
  ;    (let ((bad-hosts
  ;          (loop for bad
  ;                 in `("https://wrong.host.badssl.com/"
  ;                      "https://self-signed.badssl.com/")
  ;                if (condition-case e
  ;                       (url-retrieve
  ;                        bad (lambda (retrieved) t))
  ;                     (error nil))
  ;                collect bad)))
  ;     (if bad-hosts
  ;         (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
  ;       (url-retrieve "https://badssl.com"
  ;                     (lambda (retrieved) t))))
#+END_SRC


* Terminal
** set default shell to bash
#+BEGIN_SRC emacs-lisp 
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC


* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 15))))
#+END_SRC


* Editor
** enable line highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** reload config
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "reloads ~/.emacs.d/myConfig.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/myConfig.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** disable bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** decrease scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-consevatively 100)
#+END_SRC
** replace yes-no for y-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** no backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** display time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
** c code style
#+BEGIN_SRC emacs-lisp
  (defun my-c-style ()
    (c-set-style "k&r")
    (turn-on-font-lock)
    (setq tab-width 4))

  (add-hook 'c-mode-hook 'my-c-style)
#+END_SRC

** get rid of startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** electric
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
** spell checking
#+BEGIN_SRC emacs-lisp
  (defun spell-buffer-english ()
    (interactive)
    (ispell-change-dictionary "en_US")
    (flyspell-buffer))

  (use-package ispell
    :config
    (when (executable-find "hunspell")
      (setq-default ispell-program-name "hunspell")
      (setq ispell-really-hunspell t))

    ;; (setq ispell-program-name "aspell"
    ;;       ispell-extra-args '("--sug-mode=ultra"))
    :bind
    ("C-c e" . spell-buffer-english))

  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1) (visual-line-mode 1))))
#+END_SRC


* Packagesn
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** rainbow(colored hex colors)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
** set mode line
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line-atom-one-dark-theme
    :ensure t)
  (use-package smart-mode-line
    :ensure t
    :init
    (setq sml/theme 'atom-one-dark)
    (setq sml/no-confirm-load-theme t)
    (sml/setup))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))

  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)
  (add-hook 'latex-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC
** agressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC
** org-mode bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
					  ;(use-package swiper
					  ;:ensure t
					  ;:bind
  ;("C-s" . swiper)
#+END_SRC
** magit (version control)
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c m" . magit-status)))

  (use-package magit-gitflow
    :ensure t
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
** Async processes wherever possible
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1))
#+END_SRC


* ido
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC


* auctex
** package
#+BEGIN_SRC emacs-lisp
;(use-package auctex
;:ensure t
;:config
;(add-hook 'latex-mode-hook (lambda () ()))
;)
#+END_SRC


* auto completion
** company package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  ;(with-eval-after-load 'company
  ;  (define-key company-active-map (kbd "<tab>") #'company-select-next)
  ;  (define-key company-active-map (kbd "<S-tab>") #'company-select-previous))
#+END_SRC
** company irony
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+END_SRC
