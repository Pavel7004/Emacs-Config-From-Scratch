* Secure code editor
#+BEGIN_SRC emacs-lisp
    (require 'cl)
    (setq tls-checktrust t)

    (setq python (or (executable-find "py.exe")
		     (executable-find "python")
		     ))

    (let ((trustfile
	   (replace-regexp-in-string
	    "\\\\" "/"
	    (replace-regexp-in-string
	     "\n" ""
	     (shell-command-to-string (concat python " -m certifi"))))))
      (setq tls-program
	    (list
	     (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
		     (if (eq window-system 'w32) ".exe" "") trustfile)))
      (setq gnutls-verify-error t)
      (setq gnutls-trustfiles (list trustfile)))

  ;   Test the settings by using the following code snippet:
  ;    (let ((bad-hosts
  ;          (loop for bad
  ;                 in `("https://wrong.host.badssl.com/"
  ;                      "https://self-signed.badssl.com/")
  ;                if (condition-case e
  ;                       (url-retrieve
  ;                        bad (lambda (retrieved) t))
  ;                     (error nil))
  ;                collect bad)))
  ;     (if bad-hosts
  ;         (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
  ;       (url-retrieve "https://badssl.com"
  ;                     (lambda (retrieved) t))))
#+END_SRC


* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :hook (after-init . dashboard-setup-startup-hook)
    :config
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content nil)
    (setq dashboard-items '((recents . 5)
			    (projects . 5)))
    ;; Add heading icons
    (defun dashboard-insert-heading-icon (heading &optional _shortcut)
      "Add heading icons to dashboard."
      (when (display-graphic-p)
	;; Load `all-the-icons' if it's unavailable
	(unless (featurep 'all-the-icons)
	  (require 'all-the-icons nil t))

	(insert (cond
		 ((string-equal heading "Recent Files:")
		  (all-the-icons-octicon "history" :height 1.2 :v-adjust 0.0 :face 'dashboard-heading))
		 ((string-equal heading "Bookmarks:")
		  (all-the-icons-octicon "bookmark" :height 1.2 :v-adjust 0.0 :face 'dashboard-heading))
		 ((string-equal heading "Projects:")
		  (all-the-icons-octicon "file-directory" :height 1.2 :v-adjust 0.0 :face 'dashboard-heading))))
	(insert " ")))
    (advice-add #'dashboard-insert-heading :before #'dashboard-insert-heading-icon)

    ;; Add file icons
    ;; MUST redefine the sections because of the macro `dashboard-insert-section-list'
    (defmacro dashboard-insert-section-list (section-name list action &rest rest)
      "Insert into SECTION-NAME a LIST of items, expanding ACTION and passing REST to widget creation."
      `(when (car ,list)
	 (mapc (lambda (el)
		 (let ((widget nil))
		   (insert "\n    ")
		   (when (display-graphic-p)
		     (insert (when-let ((path (car (last (split-string ,@rest " - ")))))
			       (if (file-directory-p path)
				   (cond
				    ((and (fboundp 'tramp-tramp-file-p)
					  (tramp-tramp-file-p default-directory))
				     (all-the-icons-octicon "file-directory" :height 1.0 :v-adjust 0.01))
				    ((file-symlink-p path)
				     (all-the-icons-octicon "file-symlink-directory" :height 1.0 :v-adjust 0.01))
				    ((all-the-icons-dir-is-submodule path)
				     (all-the-icons-octicon "file-submodule" :height 1.0 :v-adjust 0.01))
				    ((file-exists-p (format "%s/.git" path))
				     (all-the-icons-octicon "repo" :height 1.1 :v-adjust 0.01))
				    (t (let ((matcher (all-the-icons-match-to-alist path all-the-icons-dir-icon-alist)))
					 (apply (car matcher) (list (cadr matcher) :v-adjust 0.01)))))
				 (all-the-icons-icon-for-file (file-name-nondirectory path)))))
		     (insert "\t"))
		   (setq widget
			 (widget-create 'push-button
					:action ,action
					:mouse-face 'highlight
					:button-prefix ""
					:button-suffix ""
					:format "%[%t%]"
					,@rest))))
	       ,list)))


    (defmacro dashboard-insert-shortcut (shortcut-char
					 search-label
					 &optional no-next-line)
      "Insert a shortcut SHORTCUT-CHAR for a given SEARCH-LABEL.
  Optionally, provide NO-NEXT-LINE to move the cursor forward a line."
      `(progn
	 (eval-when-compile (defvar dashboard-mode-map))
	 (let ((sym (make-symbol (format "Jump to \"%s\"" ,search-label))))
	   (fset sym (lambda ()
		       (interactive)
		       (unless (search-forward ,search-label (point-max) t)
			 (search-backward ,search-label (point-min) t))
		       ,@(unless no-next-line
			   '((forward-line 1)))
		       (back-to-indentation)
		       (if (display-graphic-p) (widget-forward 1))))
	   (eval-after-load 'dashboard
	     (define-key dashboard-mode-map ,shortcut-char sym)))))

    ;; Recentf
    (defun dashboard-insert-recents (list-size)
      "Add the list of LIST-SIZE items from recently edited files."
      (recentf-mode)
      (dashboard-insert-section
       "Recent Files:"
       recentf-list
       list-size
       "r"
       `(lambda (&rest ignore) (find-file-existing ,el))
       (abbreviate-file-name el)))

    ;; Projectile
    (defun dashboard-insert-projects (list-size)
      "Add the list of LIST-SIZE items of projects."
      (require 'projectile)
      (projectile-load-known-projects)
      (dashboard-insert-section
       "Projects:"
       (dashboard-subseq (projectile-relevant-known-projects)
			 0 list-size)
       list-size
       "p"
       `(lambda (&rest ignore) (projectile-switch-project-by-name ,el))
       (abbreviate-file-name el)))
    )
#+END_SRC


* Editor
** utf-8 coding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
** enable line highlight
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode t))
#+END_SRC
** reload config
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "reloads ~/.emacs.d/myConfig.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/myConfig.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** disable bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** decrease scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-consevatively 100)
#+END_SRC
** replace yes-no for y-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** no backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** display time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
** code style
*** C/C++
#+BEGIN_SRC emacs-lisp
  (defun my-c-style ()
    (c-set-style "k&r")
    (turn-on-font-lock)
    (setq tab-width 4))

  (add-hook 'c-mode-hook 'my-c-style)
  (add-hook 'c++-mode-hook 'my-c-style)
#+END_SRC
** get rid of startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** electric
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
** Terminal
*** set default shell to bash
#+BEGIN_SRC emacs-lisp 
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** org mode
*** org indent
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** real names in symbolic links
#+BEGIN_SRC emacs-lisp
  (setq find-file-visit-truename t)
#+END_SRC


* Packages
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :init
    (which-key-mode))
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex(M-x menu)
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC
** rainbow(colored hex colors)
#+BEGIN_SRC emacs-lisp
  ;; (use-package rainbow-mode
  ;;   :ensure t
  ;;   :diminish rainbow-mode
  ;;   :hook (prog-mode . rainbow-mode))
#+END_SRC
** nord colorscheme
#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
    :ensure t
    :config
    (load-theme 'nord t))
#+END_SRC
** set mode line
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config (setq doom-modeline-height 34))

  (use-package minions
    :ensure t
    :config (minions-mode 1))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-minor-mode)
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
** agressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC
** org-mode bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook
    (org-mode . org-bullets-mode))
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+END_SRC
** magit (version control)
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c m" . magit-status)))

  (use-package magit-gitflow
    :ensure t
    :hook 
    (magit-mode . turn-on-magit-gitflow))

  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 1))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  (use-package flycheck-pos-tip
    :ensure t
    :after flycheck
    :hook (flycheck-mode . flycheck-pos-tip-mode))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :hook (prog-mode . projectile-mode)
    :bind ("<f5>" . 'projectile-compile-project)
    :bind-keymap ("C-c p" . projectile-command-map))
#+END_SRC
** all the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** line numbers in prog mode
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :hook (prog-mode . linum-relative-mode)
    :config
    (setq linum-relative-current-symbol ""))
#+END_SRC
** highlight indents in prog mode
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :hook (emacs-lisp-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-auto-odd-face-perc 20)
    (setq highlight-indent-guides-auto-even-face-perc 20)
    (setq highlight-indent-guides-auto-character-face-perc 50)
    (setq highlight-indent-guides-responsive 'top))
#+END_SRC
** Async processes wherever possible
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t)
#+END_SRC

** spell checking
#+BEGIN_SRC emacs-lisp
  (defun spell-buffer-english ()
    (interactive)
    (ispell-change-dictionary "en_US")
    (flyspell-buffer))

  (use-package ispell
    :config
    (when (executable-find "hunspell")
      (setq-default ispell-program-name "hunspell")
      (setq ispell-really-hunspell t))

    ;; (setq ispell-program-name "aspell"
    ;;       ispell-extra-args '("--sug-mode=ultra"))
    :bind
    ("C-c e" . spell-buffer-english))

  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1) (visual-line-mode 1))))
#+END_SRC


* ido
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC


* auto completion
** company package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :hook (after-init . global-company-mode)
    :init
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  ;(with-eval-after-load 'company
  ;  (define-key company-active-map (kbd "<tab>") #'company-select-next)
  ;  (define-key company-active-map (kbd "<S-tab>") #'company-select-previous))
#+END_SRC
** company irony
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :after company
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :hook ((c++-mode . irony-mode)
           (c-mode . irony-mode)
           (irony-mode . irony-cdb-autosetup-compile-options)))

  (use-package flycheck-irony
    :ensure t
    :hook (irony-mode . flycheck-irony-setup))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+END_SRC
